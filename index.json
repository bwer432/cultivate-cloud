[{"uri":"/","title":"Cultivate Cloud","tags":[],"description":"","content":"Cultivate Cloud Welcome to CultivateCloud.net, a collection of resources to help cultivate cloud computing development and deployment.\ngraph TB cultivatecloudnet(cultivatecloud.net\nyou are here)--\u003eyoutubechannel(cultivatecloud\nYouTube\nchannel) cultivatecloudnet--\u003egitrepo(cultivatecloud git repo) gitrepo2(cultivatecloudsite git repo)--\u003e|builds|cultivatecloudnet youtubechannel--\u003edemoA[SQS queue video] youtubechannel--\u003edemoB[...] youtubechannel--\u003edemoM[S3 bucket video] gitrepo--\u003edemoN[SQS queue demo] gitrepo--\u003edemoO[...] gitrepo--\u003edemoZ[S3 bucket demo] demoN--\u003e|includes|cdkN(CDK app) demoZ--\u003e|includes|cdkZ(CDK app) classDef green fill:#9f6,stroke:#333,stroke-width:4px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; classDef blue fill:#69f,stroke:#333,stroke-width:4px; classDef yellow fill:#ff3,stroke:#333,stroke-width:2px; class cultivatecloudnet orange; class youtubechannel blue; class gitrepo,gitrepo2 green; class demoA,demoB,demoM,demoN,demoO,demoZ yellow; Links This CultivateCloud.net website provides a launch pad to reach the other components. The git repo cultivatecloudsite is the source code for the cultivatecloud.net website. Most people would not likely clone this unless they wanted a local copy of this commentary. The git repo cultivatecloud is the repo of demo scripts and CDK app templates. This is the principal artifact that most people wanting to follow these demos would clone. The cultivatecloud YouTube channel provides video commentary on going through some of the demonstrations, and are intended to serve as a baseline of what to expect from those selected demonstrations. More What would you like to have demonstrated for AWS cloud resource deployment?\n"},{"uri":"/010_gitclone/","title":"1. Clone Demo Repo","tags":[],"description":"","content":"Clone Demo Repo The quickest way to get started using these demonstrations is to clone the cultivatecloud repo.\ngit clone https://github.com/bwer432/cultivatecloud Prerequisite to demos: cdk bootstrap: If you have already bootstrapped your AWS environment (account + region combination) to use the AWS Cloud Development Kit (CDK), then you could skip the Bootstrap topic.\nHowever, if you do not know what that means or you have not already done a cdk bootstrap then do that before attempting any of the demos.\nThe git repo cultivatecloudsite is the source code for the cultivatecloud.net website. The git repo cultivatecloud is the repo of demo scripts and CDK app templates. These were kept separate (at the risk of confusion from similar names) so you can clone just cultivatecloud if all you want is the repo of scripts/CDK examples.\n"},{"uri":"/020_bootstrap/","title":"2. Bootstrap","tags":[],"description":"","content":"Bootstrap The demonstrations described in this site and demo artifacts included in the cultivatecloud repository set up resources using the AWS Cloud Development Kit (CDK).\nPrior to using cdk in the demonstrations, you need to \u0026ldquo;bootstrap\u0026rdquo; your AWS account on a per-region basis. Follow this video or the steps listed in this topic.\n"},{"uri":"/020_bootstrap/021_bootstrap_purpose/","title":"Bootstrap Purpose","tags":[],"description":"","content":"Demo: Bootstrap an AWS CDK Environment Why would use use the AWS CDK? To automate resource deployment in the AWS cloud.\nWe start each demonstration with a slide deck presenting the purpose of the demonstration. The bootstrap demo is no different!\nHere are the purpose points for the bootstrap deck.\nWhy? I want to automate resource deployment in the AWS cloud. What? Create an AWS CDK environment. Where? In my AWS account. How? Use AWS Cloud Shell. Then… I can use AWS CDK to deploy and destroy AWS resources in my account(s). "},{"uri":"/020_bootstrap/022_bootstrap_steps/","title":"Bootstrap Steps","tags":[],"description":"","content":"Use AWS Cloud Shell for AWS CDK Purpose: Create an AWS CDK environment. Steps:\nSign into your AWS account. Launch AWS CloudShell. Confirm tools for AWS Cloud Development Kit (AWS CDK). Bootstrap AWS account for CDK. Deploy, destroy, repeat. "},{"uri":"/020_bootstrap/023_bootstrap_script/","title":"Bootstrap Script","tags":[],"description":"","content":"Bootstrap AWS CDK If you simply use the command:\ncdk bootstrap in an unbootstrapped environment, you would likely receive an error such as:\nSpecify an environment name like \u0026lsquo;aws://123456789012/us-east-1\u0026rsquo;, or run in a directory with \u0026lsquo;cdk.json\u0026rsquo;.\nEnvironment = Account + Region A CDK environment consists of an AWS account + AWS region which you have bootstrapped to allow using the CDK to deploy resources.\ngraph TB subgraph env[CDK Environment] account((AWS Account)) region((AWS Region)) end Therefore, you could provide the cdk bootstrap command with the path of the environment in which you wish to deploy resources.\nIn AWS CloudShell, perform the following commands. AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) echo $AWS_ACCOUNT_ID echo $AWS_REGION echo aws://$AWS_ACCOUNT_ID/$AWS_REGION cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_REGION How was the value of AWS_REGION chosen by AWS CloudShell?\nReveal answer AWS CloudShell uses the region you had selected in the AWS Console.\n"},{"uri":"/020_bootstrap/027_unbootstrap_steps/","title":"Unbootstrap Steps","tags":[],"description":"","content":"Remove CDK bootstrap Purpose: Remove CDK environment if no longer needed.\nIf you no longer need to manage resources with the AWS CDK in an environment, you can \u0026ldquo;unbootstrap\u0026rdquo; that environment.\nThis effectively removes the CDK bootstrap\nThese are the high-level steps:\nRemove CDKToolkit stack with CloudFormation. Remove CDK bootstrap bucket. "},{"uri":"/020_bootstrap/028_unbootstrap_script/","title":"Unbootstrap Script","tags":[],"description":"","content":"Unbootstrap AWS CDK Here is an example script to accomplish the removal of a CDK bootstrap.\nIn AWS CloudShell, perform the following commands. aws cloudformation list-stacks --query \u0026#34;StackSummaries[?StackName==\u0026#39;CDKToolkit\u0026#39;\u0026amp;\u0026amp;StackStatus==\u0026#39;CREATE_COMPLETE\u0026#39;]\u0026#34; aws cloudformation delete-stack --stack-name CDKToolkit cdkbucket=$(aws s3 ls | grep cdk- | awk \u0026#39;{printf $3}\u0026#39;) echo $cdkbucket aws s3api delete-objects --bucket $cdkbucket \\ --delete \u0026#34;$(aws s3api list-object-versions \\ --bucket $cdkbucket \\ --output=json \\ --query=\u0026#39;{Objects: Versions[].{Key:Key,VersionId:VersionId}}\u0026#39;)\u0026#34; aws s3api delete-bucket --bucket $cdkbucket If there are no versions of objects in the bucket to delete, you may receive an error on the delete-objects step. That should be benign. Continue with the delete-bucket operation.\nUnbootstrap Video "},{"uri":"/020_bootstrap/029_bootstrap_scratch/","title":"Extra: Bootstrapping","tags":[],"description":"","content":"Longer version of CDK Bootstrap Here is a video of a longer version of the CDK Bootstrap demonstration.\nNotes:\nSign in to the AWS account you wish to use. Choose the AWS region in which you want to deploy and manage resources. Check node, npm, cdk software installation. Compose the environment path from the account id and region code. This longer video includes references to the cultivatecloud repo artifacts:\ndeck.md cdk-bootstrap.sh Questions:\nDid you find this longer version of the video useful? Did you prefer the shorter version at the beginning of the Bootstrap topic? "},{"uri":"/030_basics/","title":"3. Basics","tags":[],"description":"","content":"Basics Many of the demonstrations scripted in the cultivatecloud repo follow this theme:\nDeploy a stack of AWS resources. Use those resources in some way(s). Destroy those resources. As the Cloud Development Kit (AWS CDK) is used for the deploy and destroy tasks in such an endeavor, it would be appropriate to be familiar with deploying resources using the CDK.\nThe purpose of this \u0026ldquo;Basics\u0026rdquo; section is to help you become more familiar and hopefully more comfortable with some fundamentals of the CDK. Please work through the following:\nAWS CDK Workshop Deploy an empty stack Deploy an Amazon SQS queue Tag resources "},{"uri":"/030_basics/031_cdk_workshop/","title":"AWS CDK Workshop","tags":[],"description":"","content":"Optional Background The intended audience for these demonstrations includes people who are not software developers. However, those conducting demonstrations based on these demo scripts and videos, and those viewing or following them, might be curious about further details on the CDK.\nFor such curious people, the AWS CDK Workshop might be of interest.\nDevelopers have their choice of programming language used to leverage the power of the CDK. At the time of this writing, the CDK workshop was available in TypeScript, Python, .NET, Java, and Go.\nVisit the AWS CDK Workshop at https://cdkworkshop.com.\nThen come back here for more demos. Doing the CDK Workshop is not required to be able to follow the demonstrations here.\n"},{"uri":"/030_basics/032_empty_stack/","title":"Empty Stack","tags":[],"description":"","content":"Demo: Use an AWS CDK Environment Prior to deploying useful resources such as queues, buckets, and functions, it can be useful to practice the procedure for deploying anything using the CDK.\nThe \u0026ldquo;empty\u0026rdquo; demo creates a CloudFormation stack with no resources other than some CDK metadata.\nHere are the purpose points for the empty demo deck.\nWhy? I want to practice resource deployment in the AWS cloud. What? Use an AWS CDK environment. Where? In my AWS account. How? Use AWS CDK to create an AWS CloudFormation stack, then delete it. Then… I know how to use AWS CDK to deploy and destroy AWS resources in my account(s). Purpose: Deploy an empty stack Steps:\nCreate a CDK app (cdk init). Deploy the CDK app (cdk deploy). Use the cloud app resources. Remove the CDK app (cdk destroy). Deploy an \u0026ldquo;empty\u0026rdquo; CDK app stack mkdir empty cd empty cdk init app --language=typescript cdk deploy cdk destroy "},{"uri":"/030_basics/033_queue_demo/","title":"Queue Demo","tags":[],"description":"","content":"Demo: Create an Amazon SQS Queue As noted in The AWS Blog by Jeff Barr in 2009, the Amazon Simple Queue Service (SQS) was the first AWS service released.\nThis queue demo could be demonstrated in (at least) two ways:\nfrom scratch from the cultivatecloud repo The former includes examples of AWS CLI commands for sending and receiving messages. The latter includes examples of using Python code and the boto3 AWS SDK for Python to send and receive messages.\nFrom Scratch From the cultivatecloud repo Purpose Here are the purpose points for the queue demo deck.\nWhy? I want to use a message queue in the AWS cloud. What? Use an AWS CDK environment. Where? In my AWS account. How? Use AWS CDK to create an Amazon SQS Queue. Then… I can send and receive messages via a message queue in my AWS account. Purpose: Create a CDK stack with a queue Steps:\nCreate a CDK app (cdk init). Uncomment the Amazon SQS bits (vi lib/queue-stack.ts). Deploy the CDK app (cdk deploy). Send and receive queue messages. Remove the CDK app (cdk destroy). Deploy a queue via CDK app stack mkdir queue cd queue cdk init app --language=typescript cdk deploy aws sqs list-queues q=$(aws sqs list-queues --query \u0026#34;QueueUrls[0]\u0026#34; --output text) aws sqs receive-message --queue-url $q --wait-time-seconds 20 aws sqs send-message --queue-url $q --message-body \u0026#34;hello, world\u0026#34; cdk destroy --force Amazon SQS Documentation Queue code examples:\nAmazon SQS boto3 API Amazon SQS Python3 SQS code examples Deploy a queue via CDK app stack with Python clients git clone https://github.com/bwer432/cultivatecloud cd cultivatecloud/queue-demo/queue npm install # repopulate node_modules npx cdk deploy aws sqs list-queues q=$(aws sqs list-queues --query QueueUrls --output text | grep QueueStack-QueueQueue) aws sqs receive-message --queue-url $q --wait-time-seconds 20 aws sqs send-message --queue-url $q --message-body \u0026#34;hello, world\u0026#34; python3 ../sqs-send.py $q python3 ../sqs-recv.py $q npx cdk destroy --force "},{"uri":"/030_basics/034_tagging_demo/","title":"Tagging Demo","tags":[],"description":"","content":"Demo: Create CDK resources with tags As noted in Tagging AWS resources, tags are metadata you can add to your AWS resources to help your resource management:\nautomation security: access control cost and billing searching organizing This demonstration builds on the queue demo by adding tags to the Amazon SQS queue resource.\nThis demonstration includes steps to copy distinct versions of the tagging-stack.ts file to illustrate certain tagging techniques in the CDK. This method was chosen so that those following this demonstration do not need to type code, just copy and paste commands. This technique is repeated in other demonstrations as well.\nTagging Demo Video Purpose Here are the purpose points for the tagging demo deck.\nWhy? I want to organize cloud resources, track cost allocation, improve automation, and enhance access control. What? Use resource tags on AWS cloud resources. Where? In my AWS account. How? Use AWS CDK to tag resources. Then… I can better manage cloud resources in my AWS accounts. Use tags on CDK resources Purpose: Simplify and enhance cloud resource management Steps:\nCheck for presence of tags on existing CDK deployment. Add tags in code. (lib/tagging-stack.ts). Re-deploy the CDK app (cdk deploy). Confirm tags. Use the resources throughout their intended lifecycle. Add tags to a CDK app definition git clone https://github.com/bwer432/cultivatecloud cd cultivatecloud/tagging-demo/tagging npm install # repopulate node_modules npx cdk deploy vi lib/tagging-stack.ts # show pre-tags baseline cp ../tagging-stack-direct.ts lib/tagging-stack.ts npx cdk deploy # then show results and/or source cp ../tagging-stack-via-map.ts lib/tagging-stack.ts npx cdk deploy # then show results and/or source AWS Tagging Documentation Tagging documentation: Tagging AWS resources Filtering AWS CLI output\n"},{"uri":"/030_basics/037_static_site_demo/","title":"Static Site Demo","tags":[],"description":"","content":"Demo: Create an Serverless Static Website There are several points to this series of demonstrations:\nHow to borrow code from other tutorials and demos (and repurpose them). Deploying a serverless static website. Briefly explaining the deployment of multiple cloud resources in one stack. Borrowing Demonstration of borrowing an AWS CDK app stack template so we don\u0026rsquo;t have to start from scratch. The example will be used in a separate video to create a static website.\nDeploying Demonstration of deploying a static website hosted in Amazon S3 fronted by Amazon CloudFront. The demonstration uses the AWS CDK template borrowed in the prior video.\nExplaining Demonstration explaining some of the AWS CDK components for deploying a static website hosted in Amazon S3 fronted by Amazon CloudFront. Includes a brief note on the relationship of the CDK App, Stack, and Construct. The demonstration uses the AWS CDK template borrowed and deployed earlier.\nPurpose Here are the purpose points for the static site demo deck.\nWhy? I want to create a serverless static website. What? Use an Amazon S3 bucket and Amazon CloudFront distribution. Where? In my AWS account. How? Use AWS CDK to deploy the bucket, policy, access identity, distribution, certificate, DNS record. Then… I can host a website using Amazon S3. Deploy a static website Purpose: Show relationships between resources in the stack Steps:\nClone AWS Samples example of static site. Extract that one example for demonstration. Deploy the static site using CDK context values. Use the static site. Borrow an example git clone https://github.com/bwer432/cultivatecloud cd cultivatecloud/static-site-demo git clone https://github.com/aws-samples/aws-cdk-examples cp -R aws-cdk-examples/typescript/static-site ./static-site rm -rf aws-cdk-examples cd static-site ls Deploy a static website git clone https://github.com/bwer432/cultivatecloud cd cultivatecloud/static-site-demo/static-site npm install npm run build accountId=$(aws sts get-caller-identity --query Account --output text) aws route53 list-hosted-zones --query \u0026#34;HostedZones[].Name\u0026#34; zone=$(aws route53 list-hosted-zones --query \u0026#34;HostedZones[0].Name\u0026#34; --output text | sed \u0026#39;s@\\.$@@\u0026#39;) npx cdk deploy -c accountId=$accountId -c domain=$zone -c subdomain=www Clean up Delete the stack when you are done.\nRedefine the accountId and zone variables if in a new shell session. Use cdk destroy with the same context values as you used on the deploy. npx cdk destroy -c accountId=$accountId -c domain=$zone -c subdomain=www -f "},{"uri":"/about/","title":"About","tags":[],"description":"","content":"Welcome to CultivateCloud.net.\nThis site provides a collection of resources to help cultivate cloud computing development and deployment.\n"},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""}]